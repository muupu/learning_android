apply plugin: 'com.android.application'

dependencies {
    compile 'com.android.support:support-v4:22.2.0'

    compile('com.google.code.gson:gson:2.3.1')

    compile 'com.astuetz:pagerslidingtabstrip:1.0.1'
    compile 'de.hdodenhof:circleimageview:1.2.1'
    compile('com.github.ksoichiro:android-observablescrollview:1.2.1') {
        exclude group: 'com.android.support', module: 'support-v4'
    }

    compile('com.nostra13.universalimageloader:universal-image-loader:1.9.1')
    compile('com.nineoldandroids:library:2.4.0')
    compile('com.jakewharton:butterknife:6.+')
    compile('com.squareup.picasso:picasso:2.+')

    compile('com.github.castorflex.smoothprogressbar:library:0.5.2')
    compile('com.mcxiaoke.viewpagerindicator:library:2.4.1') {
        exclude group: 'com.android.support', module: 'support-v4'
    }

    compile('com.mcxiaoke.oauthsimple:oauthsimple:2.0.+') {
        exclude group: 'org.json', module: 'json'
    }
    compile('com.mcxiaoke.commons:library:1.0.+') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile 'com.mcxiaoke.photoview:library:1.2.3'

    compile fileTree(dir: 'libs', include: ['*.jar'])
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22
        applicationId "com.mcxiaoke.minicat2"
    }

    signingConfigs {
        release {
//            storeFile file(project.ANDROID_KEY_STORE)
//            storePassword project.ANDROID_STORE_PASSWORD
//            keyAlias project.ANDROID_KEY_ALIAS
//            keyPassword project.ANDROID_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
        }

        beta {
            signingConfig signingConfigs.release
            versionNameSuffix "-beta"
            debuggable true
        }

        debug {
            applicationIdSuffix null
            versionNameSuffix "-dev" + getDate()
            debuggable true
        }
    }

    lintOptions {
        quiet true
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

}

checkSigningConfig()

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

def checkSigningConfig() {
    if (project.hasProperty("ANDROID_KEY_STORE")
            && project.hasProperty("ANDROID_STORE_PASSWORD")
            && project.hasProperty("ANDROID_KEY_ALIAS")
            && project.hasProperty("ANDROID_KEY_PASSWORD")) {
        project.android.signingConfigs.release {
            storeFile file(project.ANDROID_KEY_STORE)
            storePassword project.ANDROID_STORE_PASSWORD
            keyAlias project.ANDROID_KEY_ALIAS
            keyPassword project.ANDROID_KEY_PASSWORD
        }
    } else {
        println "release signingConfigs not found, remove all signingConfigs!"
        project.android.buildTypes.each {
            it.signingConfig = null
        }
    }
}

def loadProperties(String fileName) {
    def config = new Properties()
    def propFile = file(fileName)
    println "loadProperties() file: " + propFile.absolutePath
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            project.ext[property.key] = property.value;
        }
    }
}



